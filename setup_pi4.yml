- name: Set up my_remote on Raspberry Pi 4
  gather_facts: false
  hosts: all
  become_user: root
  vars:
    home_directory: "/home/pi"
    lirc_src_directory: "{{ home_directory }}/lirc-src"
    my_remote_directory: "{{ home_directory }}/my_remote"
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: create deb-src list
      shell: "grep '^deb ' /etc/apt/sources.list | sed 's/^deb/deb-src/g' > /etc/apt/sources.list.d/deb-src.list"
      become: yes

    - name: Update repositories cache and install required package
      apt:
        update_cache: yes
      become: yes

    - name: Update repositories cache and install required package
      apt:
        name: "{{ item }}"
      become: yes
      loop:
        - git
        - devscripts
        - dh-exec
        - doxygen
        - expect
        - libasound2-dev
        - libftdi1-dev
        - libsystemd-dev
        - libudev-dev
        - libusb-1.0-0-dev
        - libusb-dev
        - man2html-base
        - portaudio19-dev
        - socat
        - xsltproc
        - python3-yaml
        - dh-python
        - libx11-dev
        - python3-dev
        - python3-setuptools
        - python3-pip
        - adb

    - name: Create a lirc source directory
      ansible.builtin.file:
        path: "{{ lirc_src_directory }}"
        state: directory
        mode: '0755'

    - name: Grab the lirc source from apt
      ansible.builtin.shell: apt source lirc
      args:
        chdir: "{{ lirc_src_directory }}"

    - name: Download the lirc patch file
      get_url:
        url: https://raw.githubusercontent.com/neuralassembly/raspi/master/lirc-gpio-ir-0.10.patch
        dest: "{{ lirc_src_directory }}/lirc.patch"
        mode: '0440'

    - name: Apply lirc patch file
      ansible.posix.patch:
        remote_src: yes
        src: "{{ lirc_src_directory }}/lirc.patch"
        basedir: "{{ lirc_src_directory }}/lirc-0.10.1"
        strip: 1

    - name: build the patched lirc packages
      ansible.builtin.shell: "debuild -uc -us -b"
      args:
        chdir: "{{ lirc_src_directory }}/lirc-0.10.1"

    - name: Install lirc packages
      apt:
        deb: "{{ lirc_src_directory }}/{{ item }}"
      become: yes
      loop:
        - liblirc0_0.10.1-6.3~deb10u1_armhf.deb
        - liblircclient0_0.10.1-6.3~deb10u1_armhf.deb
        - lirc_0.10.1-6.3~deb10u1_armhf.deb

    - name: Replace driver to default from devinput in lirc_options.conf
      ansible.builtin.replace:
        path: /etc/lirc/lirc_options.conf
        regexp: 'devinput'
        replace: 'default'
      become: yes

    - name: Replace device to /dev/lirc0 from auto in lirc_options.conf
      ansible.builtin.replace:
        path: /etc/lirc/lirc_options.conf
        regexp: 'auto'
        replace: '/dev/lirc0'
      become: yes

    - name: Add lirc gpio pins to /boot/config.txt
      ansible.builtin.lineinfile:
        path: /boot/config.txt
        line: "{{ item }}"
      become: yes
      loop:
        - "dtoverlay=gpio-ir,gpio_pin=18"
        - "dtoverlay=gpio-ir-tx,gpio_pin=17"

    - name: Make sure the lirc service is enabled and running
      ansible.builtin.systemd:
        state: started
        enabled: yes
        name: lircd

    - name: Disable power buttons on keyboards from putting raspberry pi to sleep
      ansible.builtin.lineinfile:
        path: /etc/systemd/logind.conf
        line: "{{ item }}"
      become: yes
      loop:
        - "HandlePowerKey=ignore"
        - "HandleSuspendKey=ignore"

    - name: Disable tty sessions to prevent remotes from locking the system due to too many login attempts
      ansible.builtin.lineinfile:
        path: /etc/systemd/logind.conf
        line: "{{ item }}"
      become: yes
      loop:
        - "NAutoVTs=0"
        - "eserveVT=0"

    - name: Disable tty service
      ansible.builtin.systemd:
        enabled: no
        name: "getty@tty1.service"
      become: yes

    - name: Clean up lirc build directories
      ansible.builtin.file:
        path: "{{ lirc_src_directory }}"
        state: absent
    - name: Copy my_remote to the raspberry pi
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}"
        dest: "{{ home_directory }}"
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=venv"

    - name: Install virtualenv
      ansible.builtin.pip:
        name: virtualenv
      become: yes

    - name: Install my_remote python requirements
      ansible.builtin.pip:
        requirements: "{{ my_remote_directory }}/requirements.txt"
        virtualenv: "{{ my_remote_directory }}/venv"

    - name: Copy ir files to the raspberry pi lirc directory
      ansible.builtin.synchronize:
        src: "{{ playbook_dir }}/ir_database/"
        dest: "/etc/lirc/lircd.conf.d/"
      become: yes

    - name: Copy my_remote service
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/my_remote.service"
        dest: /etc/systemd/system/my_remote.service
      become: yes

    - name: Enable the my_remote service
      ansible.builtin.systemd:
        enabled: yes
        name: my_remote
      become: yes

    - name: Reboot to enable all changes
      reboot:
      become: yes
